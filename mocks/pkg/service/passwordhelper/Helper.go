// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Helper is an autogenerated mock type for the Helper type
type Helper struct {
	mock.Mock
}

type Helper_Expecter struct {
	mock *mock.Mock
}

func (_m *Helper) EXPECT() *Helper_Expecter {
	return &Helper_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: password, hashedPassword, salt
func (_m *Helper) Compare(password string, hashedPassword string, salt string) bool {
	ret := _m.Called(password, hashedPassword, salt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(password, hashedPassword, salt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Helper_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type Helper_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - password string
//   - hashedPassword string
//   - salt string
func (_e *Helper_Expecter) Compare(password interface{}, hashedPassword interface{}, salt interface{}) *Helper_Compare_Call {
	return &Helper_Compare_Call{Call: _e.mock.On("Compare", password, hashedPassword, salt)}
}

func (_c *Helper_Compare_Call) Run(run func(password string, hashedPassword string, salt string)) *Helper_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Helper_Compare_Call) Return(_a0 bool) *Helper_Compare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Helper_Compare_Call) RunAndReturn(run func(string, string, string) bool) *Helper_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSalt provides a mock function with given fields:
func (_m *Helper) GenerateSalt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Helper_GenerateSalt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSalt'
type Helper_GenerateSalt_Call struct {
	*mock.Call
}

// GenerateSalt is a helper method to define mock.On call
func (_e *Helper_Expecter) GenerateSalt() *Helper_GenerateSalt_Call {
	return &Helper_GenerateSalt_Call{Call: _e.mock.On("GenerateSalt")}
}

func (_c *Helper_GenerateSalt_Call) Run(run func()) *Helper_GenerateSalt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Helper_GenerateSalt_Call) Return(_a0 string) *Helper_GenerateSalt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Helper_GenerateSalt_Call) RunAndReturn(run func() string) *Helper_GenerateSalt_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function with given fields: password, salt
func (_m *Helper) Hash(password string, salt string) (string, error) {
	ret := _m.Called(password, salt)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(password, salt)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(password, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(password, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Helper_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Helper_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password string
//   - salt string
func (_e *Helper_Expecter) Hash(password interface{}, salt interface{}) *Helper_Hash_Call {
	return &Helper_Hash_Call{Call: _e.mock.On("Hash", password, salt)}
}

func (_c *Helper_Hash_Call) Run(run func(password string, salt string)) *Helper_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Helper_Hash_Call) Return(_a0 string, _a1 error) *Helper_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Helper_Hash_Call) RunAndReturn(run func(string, string) (string, error)) *Helper_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// NewHelper creates a new instance of Helper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Helper {
	mock := &Helper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
