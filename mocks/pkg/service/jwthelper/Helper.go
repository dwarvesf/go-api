// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// Helper is an autogenerated mock type for the Helper type
type Helper struct {
	mock.Mock
}

type Helper_Expecter struct {
	mock *mock.Mock
}

func (_m *Helper) EXPECT() *Helper_Expecter {
	return &Helper_Expecter{mock: &_m.Mock}
}

// GenerateJWTToken provides a mock function with given fields: claims
func (_m *Helper) GenerateJWTToken(claims jwt.MapClaims) (string, error) {
	ret := _m.Called(claims)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(jwt.MapClaims) (string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(jwt.MapClaims) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwt.MapClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Helper_GenerateJWTToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWTToken'
type Helper_GenerateJWTToken_Call struct {
	*mock.Call
}

// GenerateJWTToken is a helper method to define mock.On call
//   - claims jwt.MapClaims
func (_e *Helper_Expecter) GenerateJWTToken(claims interface{}) *Helper_GenerateJWTToken_Call {
	return &Helper_GenerateJWTToken_Call{Call: _e.mock.On("GenerateJWTToken", claims)}
}

func (_c *Helper_GenerateJWTToken_Call) Run(run func(claims jwt.MapClaims)) *Helper_GenerateJWTToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.MapClaims))
	})
	return _c
}

func (_c *Helper_GenerateJWTToken_Call) Return(_a0 string, _a1 error) *Helper_GenerateJWTToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Helper_GenerateJWTToken_Call) RunAndReturn(run func(jwt.MapClaims) (string, error)) *Helper_GenerateJWTToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *Helper) ValidateToken(token string) (map[string]interface{}, error) {
	ret := _m.Called(token)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Helper_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type Helper_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *Helper_Expecter) ValidateToken(token interface{}) *Helper_ValidateToken_Call {
	return &Helper_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *Helper_ValidateToken_Call) Run(run func(token string)) *Helper_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Helper_ValidateToken_Call) Return(_a0 map[string]interface{}, _a1 error) *Helper_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Helper_ValidateToken_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *Helper_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewHelper creates a new instance of Helper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Helper {
	mock := &Helper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
