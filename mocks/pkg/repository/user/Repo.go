// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/dwarvesf/go-api/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

type Repo_Expecter struct {
	mock *mock.Mock
}

func (_m *Repo) EXPECT() *Repo_Expecter {
	return &Repo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *Repo) Create(ctx context.Context, _a1 *model.SignupRequest) (*model.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignupRequest) (*model.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignupRequest) *model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignupRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.SignupRequest
func (_e *Repo_Expecter) Create(ctx interface{}, _a1 interface{}) *Repo_Create_Call {
	return &Repo_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *Repo_Create_Call) Run(run func(ctx context.Context, _a1 *model.SignupRequest)) *Repo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.SignupRequest))
	})
	return _c
}

func (_c *Repo_Create_Call) Return(_a0 *model.User, _a1 error) *Repo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Create_Call) RunAndReturn(run func(context.Context, *model.SignupRequest) (*model.User, error)) *Repo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *Repo) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type Repo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Repo_Expecter) GetByEmail(ctx interface{}, email interface{}) *Repo_GetByEmail_Call {
	return &Repo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *Repo_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *Repo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repo_GetByEmail_Call) Return(_a0 *model.User, _a1 error) *Repo_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *Repo_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repo) GetByID(ctx context.Context, id int) (*model.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *Repo_Expecter) GetByID(ctx interface{}, id interface{}) *Repo_GetByID_Call {
	return &Repo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Repo_GetByID_Call) Run(run func(ctx context.Context, id int)) *Repo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Repo_GetByID_Call) Return(_a0 *model.User, _a1 error) *Repo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetByID_Call) RunAndReturn(run func(context.Context, int) (*model.User, error)) *Repo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *Repo) Update(ctx context.Context, _a1 *model.User) (*model.User, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *model.User
func (_e *Repo_Expecter) Update(ctx interface{}, _a1 interface{}) *Repo_Update_Call {
	return &Repo_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *Repo_Update_Call) Run(run func(ctx context.Context, _a1 *model.User)) *Repo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *Repo_Update_Call) Return(_a0 *model.User, _a1 error) *Repo_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Update_Call) RunAndReturn(run func(context.Context, *model.User) (*model.User, error)) *Repo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, uID, newPassword
func (_m *Repo) UpdatePassword(ctx context.Context, uID int, newPassword string) error {
	ret := _m.Called(ctx, uID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, uID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repo_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type Repo_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - uID int
//   - newPassword string
func (_e *Repo_Expecter) UpdatePassword(ctx interface{}, uID interface{}, newPassword interface{}) *Repo_UpdatePassword_Call {
	return &Repo_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, uID, newPassword)}
}

func (_c *Repo_UpdatePassword_Call) Run(run func(ctx context.Context, uID int, newPassword string)) *Repo_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *Repo_UpdatePassword_Call) Return(_a0 error) *Repo_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repo_UpdatePassword_Call) RunAndReturn(run func(context.Context, int, string) error) *Repo_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
