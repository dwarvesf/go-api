// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	boil "github.com/volatiletech/sqlboiler/v4/boil"

	mock "github.com/stretchr/testify/mock"
)

// Counable is an autogenerated mock type for the Counable type
type Counable struct {
	mock.Mock
}

type Counable_Expecter struct {
	mock *mock.Mock
}

func (_m *Counable) EXPECT() *Counable_Expecter {
	return &Counable_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, exec
func (_m *Counable) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	ret := _m.Called(ctx, exec)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, boil.ContextExecutor) (int64, error)); ok {
		return rf(ctx, exec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, boil.ContextExecutor) int64); ok {
		r0 = rf(ctx, exec)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, boil.ContextExecutor) error); ok {
		r1 = rf(ctx, exec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Counable_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type Counable_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
//   - exec boil.ContextExecutor
func (_e *Counable_Expecter) Count(ctx interface{}, exec interface{}) *Counable_Count_Call {
	return &Counable_Count_Call{Call: _e.mock.On("Count", ctx, exec)}
}

func (_c *Counable_Count_Call) Run(run func(ctx context.Context, exec boil.ContextExecutor)) *Counable_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(boil.ContextExecutor))
	})
	return _c
}

func (_c *Counable_Count_Call) Return(_a0 int64, _a1 error) *Counable_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Counable_Count_Call) RunAndReturn(run func(context.Context, boil.ContextExecutor) (int64, error)) *Counable_Count_Call {
	_c.Call.Return(run)
	return _c
}

// NewCounable creates a new instance of Counable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Counable {
	mock := &Counable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
