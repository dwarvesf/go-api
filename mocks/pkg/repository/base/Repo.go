// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	db "github.com/dwarvesf/go-api/pkg/repository/db"
	mock "github.com/stretchr/testify/mock"

	model "github.com/dwarvesf/go-api/pkg/model"
)

// Repo is an autogenerated mock type for the Repo type
type Repo[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	mock.Mock
}

type Repo_Expecter[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	mock *mock.Mock
}

func (_m *Repo[T, CreateType, UpdateType]) EXPECT() *Repo_Expecter[T, CreateType, UpdateType] {
	return &Repo_Expecter[T, CreateType, UpdateType]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, t
func (_m *Repo[T, CreateType, UpdateType]) Create(ctx db.Context, t CreateType) (*T, error) {
	ret := _m.Called(ctx, t)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Context, CreateType) (*T, error)); ok {
		return rf(ctx, t)
	}
	if rf, ok := ret.Get(0).(func(db.Context, CreateType) *T); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(db.Context, CreateType) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repo_Create_Call[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx db.Context
//   - t CreateType
func (_e *Repo_Expecter[T, CreateType, UpdateType]) Create(ctx interface{}, t interface{}) *Repo_Create_Call[T, CreateType, UpdateType] {
	return &Repo_Create_Call[T, CreateType, UpdateType]{Call: _e.mock.On("Create", ctx, t)}
}

func (_c *Repo_Create_Call[T, CreateType, UpdateType]) Run(run func(ctx db.Context, t CreateType)) *Repo_Create_Call[T, CreateType, UpdateType] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Context), args[1].(CreateType))
	})
	return _c
}

func (_c *Repo_Create_Call[T, CreateType, UpdateType]) Return(_a0 *T, _a1 error) *Repo_Create_Call[T, CreateType, UpdateType] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Create_Call[T, CreateType, UpdateType]) RunAndReturn(run func(db.Context, CreateType) (*T, error)) *Repo_Create_Call[T, CreateType, UpdateType] {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repo[T, CreateType, UpdateType]) GetByID(ctx db.Context, id int) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Context, int) (*T, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(db.Context, int) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(db.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Repo_GetByID_Call[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx db.Context
//   - id int
func (_e *Repo_Expecter[T, CreateType, UpdateType]) GetByID(ctx interface{}, id interface{}) *Repo_GetByID_Call[T, CreateType, UpdateType] {
	return &Repo_GetByID_Call[T, CreateType, UpdateType]{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Repo_GetByID_Call[T, CreateType, UpdateType]) Run(run func(ctx db.Context, id int)) *Repo_GetByID_Call[T, CreateType, UpdateType] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Context), args[1].(int))
	})
	return _c
}

func (_c *Repo_GetByID_Call[T, CreateType, UpdateType]) Return(_a0 *T, _a1 error) *Repo_GetByID_Call[T, CreateType, UpdateType] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetByID_Call[T, CreateType, UpdateType]) RunAndReturn(run func(db.Context, int) (*T, error)) *Repo_GetByID_Call[T, CreateType, UpdateType] {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, q
func (_m *Repo[T, CreateType, UpdateType]) GetList(ctx db.Context, q model.ListQuery) (*model.ListResult[T], error) {
	ret := _m.Called(ctx, q)

	var r0 *model.ListResult[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Context, model.ListQuery) (*model.ListResult[T], error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(db.Context, model.ListQuery) *model.ListResult[T]); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListResult[T])
		}
	}

	if rf, ok := ret.Get(1).(func(db.Context, model.ListQuery) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type Repo_GetList_Call[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx db.Context
//   - q model.ListQuery
func (_e *Repo_Expecter[T, CreateType, UpdateType]) GetList(ctx interface{}, q interface{}) *Repo_GetList_Call[T, CreateType, UpdateType] {
	return &Repo_GetList_Call[T, CreateType, UpdateType]{Call: _e.mock.On("GetList", ctx, q)}
}

func (_c *Repo_GetList_Call[T, CreateType, UpdateType]) Run(run func(ctx db.Context, q model.ListQuery)) *Repo_GetList_Call[T, CreateType, UpdateType] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Context), args[1].(model.ListQuery))
	})
	return _c
}

func (_c *Repo_GetList_Call[T, CreateType, UpdateType]) Return(_a0 *model.ListResult[T], _a1 error) *Repo_GetList_Call[T, CreateType, UpdateType] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_GetList_Call[T, CreateType, UpdateType]) RunAndReturn(run func(db.Context, model.ListQuery) (*model.ListResult[T], error)) *Repo_GetList_Call[T, CreateType, UpdateType] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, t
func (_m *Repo[T, CreateType, UpdateType]) Update(ctx db.Context, id int, t UpdateType) (*T, error) {
	ret := _m.Called(ctx, id, t)

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(db.Context, int, UpdateType) (*T, error)); ok {
		return rf(ctx, id, t)
	}
	if rf, ok := ret.Get(0).(func(db.Context, int, UpdateType) *T); ok {
		r0 = rf(ctx, id, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(db.Context, int, UpdateType) error); ok {
		r1 = rf(ctx, id, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repo_Update_Call[T interface{}, CreateType interface{}, UpdateType interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx db.Context
//   - id int
//   - t UpdateType
func (_e *Repo_Expecter[T, CreateType, UpdateType]) Update(ctx interface{}, id interface{}, t interface{}) *Repo_Update_Call[T, CreateType, UpdateType] {
	return &Repo_Update_Call[T, CreateType, UpdateType]{Call: _e.mock.On("Update", ctx, id, t)}
}

func (_c *Repo_Update_Call[T, CreateType, UpdateType]) Run(run func(ctx db.Context, id int, t UpdateType)) *Repo_Update_Call[T, CreateType, UpdateType] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(db.Context), args[1].(int), args[2].(UpdateType))
	})
	return _c
}

func (_c *Repo_Update_Call[T, CreateType, UpdateType]) Return(_a0 *T, _a1 error) *Repo_Update_Call[T, CreateType, UpdateType] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repo_Update_Call[T, CreateType, UpdateType]) RunAndReturn(run func(db.Context, int, UpdateType) (*T, error)) *Repo_Update_Call[T, CreateType, UpdateType] {
	_c.Call.Return(run)
	return _c
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo[T interface{}, CreateType interface{}, UpdateType interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo[T, CreateType, UpdateType] {
	mock := &Repo[T, CreateType, UpdateType]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
