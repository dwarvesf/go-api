// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ENV is an autogenerated mock type for the ENV type
type ENV struct {
	mock.Mock
}

type ENV_Expecter struct {
	mock *mock.Mock
}

func (_m *ENV) EXPECT() *ENV_Expecter {
	return &ENV_Expecter{mock: &_m.Mock}
}

// GetBool provides a mock function with given fields: _a0
func (_m *ENV) GetBool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ENV_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type ENV_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - _a0 string
func (_e *ENV_Expecter) GetBool(_a0 interface{}) *ENV_GetBool_Call {
	return &ENV_GetBool_Call{Call: _e.mock.On("GetBool", _a0)}
}

func (_c *ENV_GetBool_Call) Run(run func(_a0 string)) *ENV_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ENV_GetBool_Call) Return(_a0 bool) *ENV_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENV_GetBool_Call) RunAndReturn(run func(string) bool) *ENV_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: _a0
func (_m *ENV) GetInt(_a0 string) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ENV_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type ENV_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - _a0 string
func (_e *ENV_Expecter) GetInt(_a0 interface{}) *ENV_GetInt_Call {
	return &ENV_GetInt_Call{Call: _e.mock.On("GetInt", _a0)}
}

func (_c *ENV_GetInt_Call) Run(run func(_a0 string)) *ENV_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ENV_GetInt_Call) Return(_a0 int) *ENV_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENV_GetInt_Call) RunAndReturn(run func(string) int) *ENV_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: _a0
func (_m *ENV) GetString(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ENV_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type ENV_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - _a0 string
func (_e *ENV_Expecter) GetString(_a0 interface{}) *ENV_GetString_Call {
	return &ENV_GetString_Call{Call: _e.mock.On("GetString", _a0)}
}

func (_c *ENV_GetString_Call) Run(run func(_a0 string)) *ENV_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ENV_GetString_Call) Return(_a0 string) *ENV_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ENV_GetString_Call) RunAndReturn(run func(string) string) *ENV_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// NewENV creates a new instance of ENV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewENV(t interface {
	mock.TestingT
	Cleanup(func())
}) *ENV {
	mock := &ENV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
