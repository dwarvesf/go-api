// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/dwarvesf/go-api/pkg/model"
	mock "github.com/stretchr/testify/mock"

	orm "github.com/dwarvesf/go-api/pkg/repository/orm"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// Me provides a mock function with given fields: userID
func (_m *Controller) Me(userID int) (*orm.User, error) {
	ret := _m.Called(userID)

	var r0 *orm.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*orm.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *orm.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_Me_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Me'
type Controller_Me_Call struct {
	*mock.Call
}

// Me is a helper method to define mock.On call
//   - userID int
func (_e *Controller_Expecter) Me(userID interface{}) *Controller_Me_Call {
	return &Controller_Me_Call{Call: _e.mock.On("Me", userID)}
}

func (_c *Controller_Me_Call) Run(run func(userID int)) *Controller_Me_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Controller_Me_Call) Return(_a0 *orm.User, _a1 error) *Controller_Me_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_Me_Call) RunAndReturn(run func(int) (*orm.User, error)) *Controller_Me_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: _a0
func (_m *Controller) UpdatePassword(_a0 model.UpdatePasswordRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdatePasswordRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Controller_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type Controller_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - _a0 model.UpdatePasswordRequest
func (_e *Controller_Expecter) UpdatePassword(_a0 interface{}) *Controller_UpdatePassword_Call {
	return &Controller_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", _a0)}
}

func (_c *Controller_UpdatePassword_Call) Run(run func(_a0 model.UpdatePasswordRequest)) *Controller_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UpdatePasswordRequest))
	})
	return _c
}

func (_c *Controller_UpdatePassword_Call) Return(_a0 error) *Controller_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Controller_UpdatePassword_Call) RunAndReturn(run func(model.UpdatePasswordRequest) error) *Controller_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ID, _a1
func (_m *Controller) UpdateUser(ID int, _a1 model.UpdateUserRequest) (*orm.User, error) {
	ret := _m.Called(ID, _a1)

	var r0 *orm.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, model.UpdateUserRequest) (*orm.User, error)); ok {
		return rf(ID, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, model.UpdateUserRequest) *orm.User); ok {
		r0 = rf(ID, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, model.UpdateUserRequest) error); ok {
		r1 = rf(ID, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Controller_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ID int
//   - _a1 model.UpdateUserRequest
func (_e *Controller_Expecter) UpdateUser(ID interface{}, _a1 interface{}) *Controller_UpdateUser_Call {
	return &Controller_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ID, _a1)}
}

func (_c *Controller_UpdateUser_Call) Run(run func(ID int, _a1 model.UpdateUserRequest)) *Controller_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(model.UpdateUserRequest))
	})
	return _c
}

func (_c *Controller_UpdateUser_Call) Return(_a0 *orm.User, _a1 error) *Controller_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_UpdateUser_Call) RunAndReturn(run func(int, model.UpdateUserRequest) (*orm.User, error)) *Controller_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
