// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Log is an autogenerated mock type for the Log type
type Log struct {
	mock.Mock
}

type Log_Expecter struct {
	mock *mock.Mock
}

func (_m *Log) EXPECT() *Log_Expecter {
	return &Log_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: v
func (_m *Log) Debug(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Log_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Log_Expecter) Debug(v ...interface{}) *Log_Debug_Call {
	return &Log_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, v...)...)}
}

func (_c *Log_Debug_Call) Run(run func(v ...interface{})) *Log_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Debug_Call) Return() *Log_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Debug_Call) RunAndReturn(run func(...interface{})) *Log_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Debugf provides a mock function with given fields: format, v
func (_m *Log) Debugf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Log_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Debugf(format interface{}, v ...interface{}) *Log_Debugf_Call {
	return &Log_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Log_Debugf_Call) Run(run func(format string, v ...interface{})) *Log_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Debugf_Call) Return() *Log_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Debugf_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err, v
func (_m *Log) Error(err error, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Log_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
//   - v ...interface{}
func (_e *Log_Expecter) Error(err interface{}, v ...interface{}) *Log_Error_Call {
	return &Log_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{err}, v...)...)}
}

func (_c *Log_Error_Call) Run(run func(err error, v ...interface{})) *Log_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *Log_Error_Call) Return() *Log_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Error_Call) RunAndReturn(run func(error, ...interface{})) *Log_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errorf provides a mock function with given fields: err, format, v
func (_m *Log) Errorf(err error, format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type Log_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - err error
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Errorf(err interface{}, format interface{}, v ...interface{}) *Log_Errorf_Call {
	return &Log_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{err, format}, v...)...)}
}

func (_c *Log_Errorf_Call) Run(run func(err error, format string, v ...interface{})) *Log_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Errorf_Call) Return() *Log_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Errorf_Call) RunAndReturn(run func(error, string, ...interface{})) *Log_Errorf_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: err, v
func (_m *Log) Fatal(err error, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type Log_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - err error
//   - v ...interface{}
func (_e *Log_Expecter) Fatal(err interface{}, v ...interface{}) *Log_Fatal_Call {
	return &Log_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{err}, v...)...)}
}

func (_c *Log_Fatal_Call) Run(run func(err error, v ...interface{})) *Log_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), variadicArgs...)
	})
	return _c
}

func (_c *Log_Fatal_Call) Return() *Log_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Fatal_Call) RunAndReturn(run func(error, ...interface{})) *Log_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Fatalf provides a mock function with given fields: err, format, v
func (_m *Log) Fatalf(err error, format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, err, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type Log_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - err error
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Fatalf(err interface{}, format interface{}, v ...interface{}) *Log_Fatalf_Call {
	return &Log_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{err, format}, v...)...)}
}

func (_c *Log_Fatalf_Call) Run(run func(err error, format string, v ...interface{})) *Log_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(error), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Fatalf_Call) Return() *Log_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Fatalf_Call) RunAndReturn(run func(error, string, ...interface{})) *Log_Fatalf_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: v
func (_m *Log) Info(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Log_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Log_Expecter) Info(v ...interface{}) *Log_Info_Call {
	return &Log_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, v...)...)}
}

func (_c *Log_Info_Call) Run(run func(v ...interface{})) *Log_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Info_Call) Return() *Log_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Info_Call) RunAndReturn(run func(...interface{})) *Log_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Infof provides a mock function with given fields: format, v
func (_m *Log) Infof(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type Log_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Infof(format interface{}, v ...interface{}) *Log_Infof_Call {
	return &Log_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, v...)...)}
}

func (_c *Log_Infof_Call) Run(run func(format string, v ...interface{})) *Log_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Infof_Call) Return() *Log_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Infof_Call) RunAndReturn(run func(string, ...interface{})) *Log_Infof_Call {
	_c.Call.Return(run)
	return _c
}

// Print provides a mock function with given fields: v
func (_m *Log) Print(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type Log_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Log_Expecter) Print(v ...interface{}) *Log_Print_Call {
	return &Log_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, v...)...)}
}

func (_c *Log_Print_Call) Run(run func(v ...interface{})) *Log_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Print_Call) Return() *Log_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Print_Call) RunAndReturn(run func(...interface{})) *Log_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: format, v
func (_m *Log) Printf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type Log_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Printf(format interface{}, v ...interface{}) *Log_Printf_Call {
	return &Log_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Log_Printf_Call) Run(run func(format string, v ...interface{})) *Log_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Printf_Call) Return() *Log_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Printf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Printf_Call {
	_c.Call.Return(run)
	return _c
}

// Println provides a mock function with given fields: v
func (_m *Log) Println(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type Log_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Log_Expecter) Println(v ...interface{}) *Log_Println_Call {
	return &Log_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, v...)...)}
}

func (_c *Log_Println_Call) Run(run func(v ...interface{})) *Log_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Println_Call) Return() *Log_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Println_Call) RunAndReturn(run func(...interface{})) *Log_Println_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: v
func (_m *Log) Warn(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Log_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Log_Expecter) Warn(v ...interface{}) *Log_Warn_Call {
	return &Log_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, v...)...)}
}

func (_c *Log_Warn_Call) Run(run func(v ...interface{})) *Log_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Log_Warn_Call) Return() *Log_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Warn_Call) RunAndReturn(run func(...interface{})) *Log_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// Warnf provides a mock function with given fields: format, v
func (_m *Log) Warnf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// Log_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type Log_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *Log_Expecter) Warnf(format interface{}, v ...interface{}) *Log_Warnf_Call {
	return &Log_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, v...)...)}
}

func (_c *Log_Warnf_Call) Run(run func(format string, v ...interface{})) *Log_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Log_Warnf_Call) Return() *Log_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Log_Warnf_Call) RunAndReturn(run func(string, ...interface{})) *Log_Warnf_Call {
	_c.Call.Return(run)
	return _c
}

// NewLog creates a new instance of Log. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *Log {
	mock := &Log{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
