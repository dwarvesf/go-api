// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	trace "go.opentelemetry.io/otel/trace"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

type Tracer_Expecter struct {
	mock *mock.Mock
}

func (_m *Tracer) EXPECT() *Tracer_Expecter {
	return &Tracer_Expecter{mock: &_m.Mock}
}

// Clean provides a mock function with given fields: timeout
func (_m *Tracer) Clean(timeout time.Duration) {
	_m.Called(timeout)
}

// Tracer_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type Tracer_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *Tracer_Expecter) Clean(timeout interface{}) *Tracer_Clean_Call {
	return &Tracer_Clean_Call{Call: _e.mock.On("Clean", timeout)}
}

func (_c *Tracer_Clean_Call) Run(run func(timeout time.Duration)) *Tracer_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *Tracer_Clean_Call) Return() *Tracer_Clean_Call {
	_c.Call.Return()
	return _c
}

func (_c *Tracer_Clean_Call) RunAndReturn(run func(time.Duration)) *Tracer_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, spanName, opts
func (_m *Tracer) Start(ctx context.Context, spanName string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, spanName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 context.Context
	var r1 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context, string, ...trace.SpanStartOption) (context.Context, trace.Span)); ok {
		return rf(ctx, spanName, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...trace.SpanStartOption) context.Context); ok {
		r0 = rf(ctx, spanName, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...trace.SpanStartOption) trace.Span); ok {
		r1 = rf(ctx, spanName, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(trace.Span)
		}
	}

	return r0, r1
}

// Tracer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Tracer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - spanName string
//   - opts ...trace.SpanStartOption
func (_e *Tracer_Expecter) Start(ctx interface{}, spanName interface{}, opts ...interface{}) *Tracer_Start_Call {
	return &Tracer_Start_Call{Call: _e.mock.On("Start",
		append([]interface{}{ctx, spanName}, opts...)...)}
}

func (_c *Tracer_Start_Call) Run(run func(ctx context.Context, spanName string, opts ...trace.SpanStartOption)) *Tracer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]trace.SpanStartOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(trace.SpanStartOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Tracer_Start_Call) Return(_a0 context.Context, _a1 trace.Span) *Tracer_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracer_Start_Call) RunAndReturn(run func(context.Context, string, ...trace.SpanStartOption) (context.Context, trace.Span)) *Tracer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewTracer creates a new instance of Tracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tracer {
	mock := &Tracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
